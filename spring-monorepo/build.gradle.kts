/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 */

plugins {
    id("java")
}

group = "com.benjamin"

subprojects {

}



abstract class CreateSpringApp : DefaultTask() {

    private var appNameOption: String? = null

    @Option(option = "name", description = "Configures the app name")
    fun setAppNameOption(appNameOption: String) {
        this.appNameOption = appNameOption
    }

    @Input
    fun getAppNameOption(): String? {
        return this.appNameOption
    }

    @Internal
    fun getSanitizedClassName(): String {
        val input = this.appNameOption.toString()
        val sb = StringBuilder()
        var capitalizeNext = false

        for (char in input) {
            if (char == '-') {
                capitalizeNext = true
            } else {
                sb.append(if (capitalizeNext) char.uppercaseChar() else char)
                capitalizeNext = false
            }
        }

        val sanitizedClassName = sb.toString()

        return sanitizedClassName.substring(0, 1).uppercase() +
                sanitizedClassName.substring(1) + "Application"
    }

    @Internal
    fun getSanitizedPackagePath(): String {
        val appPackage = this.appNameOption.toString().replace("-", "_")
        val groupPackage = project.group.toString().replace(".", "/")
        return "$groupPackage/$appPackage"
    }

    @TaskAction
    fun create() {
        println("Creating app: $appNameOption with group-id:${project.group}")

        val mainClassTemplate = this.readFile("buildSrc/src/main/resources/main.java.template")
        val buildGradleTemplate = this.readFile("buildSrc/src/main/resources/build.gradle.kts.template")
        val applicationYamlTemplate = this.readFile("buildSrc/src/main/resources/application.yaml.template")

        val packageName = project.group.toString()
        val packagePath = this.getSanitizedPackagePath()
        val className = this.getSanitizedClassName()
        val appPackage = appNameOption.toString().replace("-", "_")

        val mainClassContent = mainClassTemplate
            .replace("#{APP_NAME}", appPackage)
            .replace("#{PACKAGE_NAME}", packageName)
            .replace("#{CLASS_NAME}", className)

        val buildGradleContent = buildGradleTemplate
            .replace("#{PACKAGE_NAME}", packageName)

        val applicationYamlContent = applicationYamlTemplate
            .replace("#{APP_NAME}", appPackage)

        this.exec("mkdir -p apps/$appNameOption/src/main/java/$packagePath")
        this.exec("mkdir -p apps/$appNameOption/src/main/resources")
        this.exec("mkdir -p apps/$appNameOption/src/test/java/$packagePath")

        this.writeFile("apps/$appNameOption/src/main/java/$packagePath/${className}.java", mainClassContent)
        this.writeFile("apps/$appNameOption/build.gradle.kts", buildGradleContent)
        this.writeFile("apps/$appNameOption/src/main/resources/application.yaml", applicationYamlContent)
    }

    private fun exec(command: String) {
        Runtime.getRuntime().exec(command)
    }

    private fun readFile(fileName: String): String {
        return File(fileName).readText(Charsets.UTF_8)
    }

    private fun writeFile(fileName: String, content: String) {
        File(fileName).writeText(content, Charsets.UTF_8)
    }

}

abstract class CreateLibrary : DefaultTask() {

    private var libNameOption: String? = null

    @Option(option = "lib", description = "Configures the new lib name")
    fun setLibNameOption(libNameOption: String) {
        this.libNameOption = libNameOption
    }

    @Input
    fun getLibNameOption(): String? {
        return this.libNameOption
    }

    @Internal
    fun getSanitizedClassName(): String {
        val input = this.libNameOption.toString()
        val sb = StringBuilder()
        var capitalizeNext = false

        for (char in input) {
            if (char == '-') {
                capitalizeNext = true
            } else {
                sb.append(if (capitalizeNext) char.uppercaseChar() else char)
                capitalizeNext = false
            }
        }

        val sanitizedClassName = sb.toString()

        return sanitizedClassName.substring(0, 1).uppercase() +
                sanitizedClassName.substring(1) + "Application"
    }

    @Internal
    fun getSanitizedPackagePath(): String {
        val appPackage = this.libNameOption.toString().replace("-", "_")
        val groupPackage = project.group.toString().replace(".", "/")
        return "$groupPackage/$appPackage"
    }

    @TaskAction
    fun create() {
        println("Creating lib: $libNameOption with group-id: ${project.group}")

        val buildGradleTemplate = this.readFile("buildSrc/src/main/resources/lib-build.gradle.kts.template")

        val packageName = project.group.toString()
        val packagePath = this.getSanitizedPackagePath()


        val buildGradleContent = buildGradleTemplate
            .replace("#{PACKAGE_NAME}", packageName)



        this.exec("mkdir -p libs/$libNameOption/src/main/java/$packagePath")
        this.exec("mkdir -p libs/$libNameOption/src/main/resources")
        this.exec("mkdir -p libs/$libNameOption/src/test/java/$packagePath")

        this.writeFile("libs/$libNameOption/build.gradle.kts", buildGradleContent)
    }

    private fun exec(command: String) {
        Runtime.getRuntime().exec(command)
    }

    private fun readFile(fileName: String): String {
        return File(fileName).readText(Charsets.UTF_8)
    }

    private fun writeFile(fileName: String, content: String) {
        File(fileName).writeText(content, Charsets.UTF_8)
    }

}

// Register the hello Task with type HelloTask
tasks.register<CreateSpringApp>("create-spring-app") {
    group = "Custom tasks"
    description = "Create a spring application with default configuration"
}

tasks.register<CreateLibrary>("create-library") {
    group = "Custom tasks"
    description = "Create a java library for the project"
}

